/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.exam.utilities;

import java.awt.Color;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import lk.ijse.exam.view.QuestionsPanel;
import lk.ijse.exam.view.ResultsPanel;

/**
 *
 * @author Imalka Gunawardana
 */
public class CountdownTimerPanel extends javax.swing.JPanel {

    private int seconds;
    private int minutes;
    private int hours;
    private String[] time;
    private Timer timer;
    private QuestionsPanel questionsPanels;
    private int val = 60;

    /**
     * Creates new form CountdownTimerPanel
     */
    public CountdownTimerPanel(QuestionsPanel questionsPanels, String[] time) {
        initComponents();
        setSize(290, 90);
        setVisible(true);
        this.time = time;
        this.questionsPanels = questionsPanels;
        setTime();
        startTimer();
    }

    public void startTimer() {
        timer = new Timer();
        lblSeconds.setText(seconds + "");
        timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                seconds--;
                if (seconds < 10) {
                    lblSeconds.setText("0" + seconds);
                } else {
                    lblSeconds.setText(seconds + "");
                }
                if (seconds == 0) {
                    seconds = val;
                }
                if (seconds == val - 1) {
                    minutes--;
                    if (minutes < 10) {
                        lblMinutes.setText("0" + minutes);
                    } else {
                        lblMinutes.setText(minutes + "");
                    }
                }
                if (minutes == 0 && hours > 0) {
                    minutes = val;
                }
                if (minutes == val - 1 && seconds == val - 1 && hours > 0) {
                    hours--;
                    if (hours < 10) {
                        lblHours.setText("0" + hours);
                    } else {
                        lblHours.setText(hours + "");
                    }
                }
                if (hours == 0 && minutes == 0 && seconds <= 30) {
                    lblHours.setForeground(Color.RED);
                    lblMinutes.setForeground(Color.RED);
                    lblSeconds.setForeground(Color.RED);
                    lblSep1.setForeground(Color.RED);
                    lblSep2.setForeground(Color.RED);
                }
                if (Integer.parseInt(lblHours.getText()) == 0 && Integer.parseInt(lblMinutes.getText()) == 0 && Integer.parseInt(lblSeconds.getText()) == 0) {
                    timer.cancel();
                    questionsPanels.resetAll();
                    questionsPanels.pnlWaitingVisibility(true);
                    questionsPanels.setDisplayText();
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(CountdownTimerPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    questionsPanels.setVisible(false);
                    ResultsPanel.getInstance().setVisible(true);
                    ResultsPanel.getInstance().showResults();
                }
            }
        }, 1000, 1000);
    }

    private void setTime() {
        seconds = val - 1;
        hours = Integer.parseInt(time[0]);
        if (Integer.parseInt(time[1]) == 0) {
            minutes = Integer.parseInt(time[1]);
        } else {
            minutes = Integer.parseInt(time[1]) - 1;
        }

        if (Integer.parseInt(lblHours.getText()) < 10) {
            lblHours.setText("0" + hours);
        } else {
            lblHours.setText(hours + "");
        }
        if (Integer.parseInt(lblMinutes.getText()) < 10) {
            lblMinutes.setText("0" + minutes);
        } else {
            lblMinutes.setText(minutes + "");
        }
    }

    public void stopTimer() {
        timer.cancel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMinutes = new javax.swing.JLabel();
        lblSeconds = new javax.swing.JLabel();
        lblHours = new javax.swing.JLabel();
        lblSep2 = new javax.swing.JLabel();
        lblSep1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(58, 58, 58));
        setLayout(null);

        lblMinutes.setFont(new java.awt.Font("Consolas", 0, 40)); // NOI18N
        lblMinutes.setForeground(new java.awt.Color(255, 153, 0));
        lblMinutes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMinutes.setText("00");
        lblMinutes.setName("Minutes"); // NOI18N
        add(lblMinutes);
        lblMinutes.setBounds(110, 30, 70, 50);

        lblSeconds.setFont(new java.awt.Font("Consolas", 0, 40)); // NOI18N
        lblSeconds.setForeground(new java.awt.Color(255, 153, 0));
        lblSeconds.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSeconds.setText("00");
        lblSeconds.setName("Seconds"); // NOI18N
        add(lblSeconds);
        lblSeconds.setBounds(210, 30, 70, 50);

        lblHours.setFont(new java.awt.Font("Consolas", 0, 40)); // NOI18N
        lblHours.setForeground(new java.awt.Color(255, 153, 0));
        lblHours.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHours.setText("00");
        lblHours.setName("Hours"); // NOI18N
        add(lblHours);
        lblHours.setBounds(10, 30, 70, 50);

        lblSep2.setFont(new java.awt.Font("Consolas", 0, 40)); // NOI18N
        lblSep2.setForeground(new java.awt.Color(255, 153, 0));
        lblSep2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSep2.setText(":");
        add(lblSep2);
        lblSep2.setBounds(180, 30, 30, 50);

        lblSep1.setFont(new java.awt.Font("Consolas", 0, 40)); // NOI18N
        lblSep1.setForeground(new java.awt.Color(255, 153, 0));
        lblSep1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSep1.setText(":");
        add(lblSep1);
        lblSep1.setBounds(80, 30, 30, 50);

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hours");
        add(jLabel1);
        jLabel1.setBounds(10, 10, 70, 16);

        jLabel2.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Minutes");
        add(jLabel2);
        jLabel2.setBounds(110, 10, 70, 16);

        jLabel3.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Seconds");
        add(jLabel3);
        jLabel3.setBounds(210, 10, 70, 16);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblHours;
    private javax.swing.JLabel lblMinutes;
    private javax.swing.JLabel lblSeconds;
    private javax.swing.JLabel lblSep1;
    private javax.swing.JLabel lblSep2;
    // End of variables declaration//GEN-END:variables
}
